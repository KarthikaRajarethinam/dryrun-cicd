name: Build & Deploy Selective/Incremental Microservices Manual

on:
  workflow_dispatch:
    inputs:
      microservices:
        description: 'Comma-separated list of microservices to build and deploy (e.g., microservice-a,microservice-b,frontend)'
        required: true
        default: 'microservice-a,microservice-b,frontend'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write         # Required to push .last-built-commit
      id-token: write         # Required for GCP Workload Identity Federation

    env:
      REPO_URL: https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to detect changes with git

      - name: Install Docker Compose CLI plugin
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/30467746746/locations/global/workloadIdentityPools/github-cicd/providers/github'
          service_account: 'cicd-gitops@das-terraform-dry-run.iam.gserviceaccount.com'

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

      - name: Parse microservices input
        id: parse
        run: |
          echo "SERVICES=${{ github.event.inputs.microservices }}" >> $GITHUB_ENV

      - name: Detect changed microservices
        id: detect_changes
        run: |
          declare -A SERVICE_PATHS=(
            [microservice-a]="cloud-dry-run/backend/microservice-a"
            [microservice-b]="cloud-dry-run/backend/microservice-b"
            [frontend]="cloud-dry-run/frontend"
          )

          if [ -f .last-built-commit ]; then
            BASE_COMMIT=$(cat .last-built-commit)
          else
            BASE_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "Comparing commits: $BASE_COMMIT..HEAD"
          CHANGED_FILES=$(git diff --name-only "$BASE_COMMIT"..HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          CHANGED_SERVICES=""
          for svc in $(echo "${{ env.SERVICES }}" | tr ',' '\n'); do
            path="${SERVICE_PATHS[$svc]}"
            if echo "$CHANGED_FILES" | grep -q "^$path/"; then
              CHANGED_SERVICES="${CHANGED_SERVICES},${svc}"
            fi
          done

          CHANGED_SERVICES="${CHANGED_SERVICES#,}"
          echo "Changed or affected microservices: $CHANGED_SERVICES"
          echo "changed_services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT

      - name: Log and skip if no changes
        if: steps.detect_changes.outputs.changed_services == ''
        run: |
          echo "No selected microservices have changes. Skipping build and push."

      - name: Build changed Docker images
        if: steps.detect_changes.outputs.changed_services != ''
        run: |
          SERVICES="${{ steps.detect_changes.outputs.changed_services }}"
          echo "Building services: $SERVICES"
          docker compose -f docker-compose.yml build $(echo $SERVICES | tr ',' ' ')

      - name: Push Docker images
        if: steps.detect_changes.outputs.changed_services != ''
        run: |
          SERVICES="${{ steps.detect_changes.outputs.changed_services }}"
          echo "Pushing services: $SERVICES"
          docker compose -f docker-compose.yml push $(echo $SERVICES | tr ',' ' ')

      - name: Update .last-built-commit and push to main
        if: steps.detect_changes.outputs.changed_services != ''
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git rev-parse HEAD > .last-built-commit
          git add .last-built-commit
          git commit -m "Update last built commit [skip ci]" || echo "Nothing to commit"
          git push "${REPO_URL}" HEAD:main
