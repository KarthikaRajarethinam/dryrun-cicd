name: Build & Deploy Microservices

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"
      - "cloud-dry-run/docker-compose.yml"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout code from the repository
      - name: Checkout source code
        uses: actions/checkout@v3

      # ✅ Print current directory and list top-level files for debugging
      - name: Debug — Current directory and top-level files
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing top-level files:"
          ls -la

      # ✅ Verify that the docker-compose.yml file exists in the correct path
      - name: Check docker-compose.yml exists
        run: |
          if [ -f cloud-dry-run/docker-compose.yml ]; then
            echo "docker-compose.yml found"
          else
            echo "docker-compose.yml NOT found"
            exit 1
          fi

      # ✅ Install Docker Compose plugin manually
      - name: Install Docker Compose CLI plugin
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      # ✅ Authenticate to Google Cloud using Workload Identity Federation (no secrets used)
      - name: Authenticate with Google Cloud using Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          # Replace with your actual WIF provider and service account email
          workload_identity_provider: 'projects/30467746746/locations/global/workloadIdentityPools/github-cicd/providers/github'
          service_account: 'cicd-gitops@das-terraform-dry-run.iam.gserviceaccount.com'
          
      # ✅ Configure Docker to authenticate with Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

      # ✅ Ensure the Docker repository exists in Artifact Registry, or create it
      - name: Ensure Artifact Registry repo exists or create it
        run: |
          set -e
          REPO_NAME="das-docker-repo"
          LOCATION="australia-southeast1"
          PROJECT_ID=$(gcloud config get-value project)
          echo "Checking if Artifact Registry repo '$REPO_NAME' exists in '$LOCATION'..."
          if gcloud artifacts repositories describe "$REPO_NAME" --location="$LOCATION" --project="$PROJECT_ID" >/dev/null 2>&1; then
            echo "Repository '$REPO_NAME' already exists."
          else
            echo "Repository '$REPO_NAME' not found. Creating it now..."
            gcloud artifacts repositories create "$REPO_NAME" \
              --repository-format=docker \
              --location="$LOCATION" \
              --description="Docker repo for dry run CI/CD" \
              --project="$PROJECT_ID"
            echo "Repository '$REPO_NAME' created successfully."
          fi

      # ✅ Build all services/images defined in the Docker Compose file
      - name: Build all Docker images with Docker Compose
        run: |
          docker compose -f cloud-dry-run/docker-compose.yml build

      # ✅ Push all built images to Google Artifact Registry
      - name: Push all Docker images with Docker Compose
        run: |
          docker compose -f cloud-dry-run/docker-compose.yml push

      # ✅ List recently pushed images for each service
      - name: List recent images in Artifact Registry
        run: |
          for svc in microservice-a microservice-b frontend; do
            echo "::group::${svc}"
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table[box](DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
            echo "::endgroup::"
          done

      # ✅ Final confirmation step that pipeline succeeded
      - name: Workflow completed successfully
        run: echo "CI pipeline completed successfully. All images built and pushed to Google Artifact Registry."
