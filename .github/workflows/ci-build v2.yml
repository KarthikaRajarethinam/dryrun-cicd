name: Build & Deploy Microservices v2

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"
      - "cloud-dry-run/docker-compose.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"
      - "cloud-dry-run/docker-compose.yml"

jobs:
  build-and-deploy:
    name: Build & Deploy Affected Microservices
    runs-on: ubuntu-latest

    environment:
      name: production
      url: https://console.cloud.google.com/artifacts

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      # Step 1: Checkout the source code
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Install Google Cloud SDK (to ensure gcloud is available)
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: das-terraform-dry-run

      # Step 3: Set up Docker Compose v2
      - name: Set up Docker Compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      # Step 4: Authenticate to Google Cloud using Workload Identity Federation
      - name: Authenticate with Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/30467746746/locations/global/workloadIdentityPools/github-cicd/providers/github'
          service_account: 'github-wif@das-terraform-dry-run.iam.gserviceaccount.com'

      # Step 5: Configure Docker to push to Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

      # Step 6: Ensure the Artifact Registry repo exists
      - name: Ensure Artifact Registry Repo Exists
        run: |
          REPO_NAME="das-docker-repo"
          LOCATION="australia-southeast1"
          PROJECT_ID="das-terraform-dry-run"

          if ! gcloud artifacts repositories describe "$REPO_NAME" --location="$LOCATION" --project="$PROJECT_ID" >/dev/null 2>&1; then
            gcloud artifacts repositories create "$REPO_NAME" \
              --repository-format=docker \
              --location="$LOCATION" \
              --description="Docker repo for microservices CI/CD" \
              --project="$PROJECT_ID"
          fi

      # Step 7: Detect which microservices changed
      - name: Detect Changed Microservices
        id: changes
        run: |
          changed_services=()

          base_ref=$(git merge-base origin/main HEAD)
          changed_files=$(git diff --name-only "$base_ref" HEAD)

          if echo "$changed_files" | grep -q "^backend/microservice-a/"; then
            changed_services+=("microservice-a")
          fi
          if echo "$changed_files" | grep -q "^backend/microservice-b/"; then
            changed_services+=("microservice-b")
          fi
          if echo "$changed_files" | grep -q "^frontend/"; then
            changed_services+=("frontend")
          fi

          services=$(IFS=" "; echo "${changed_services[*]}")
          echo "services=$services" >> "$GITHUB_OUTPUT"

      # Step 8: Build and push Docker images for changed services
      - name: Build, Tag, and Push Changed Images
        if: steps.changes.outputs.services != ''
        env:
          PROJECT_ID: das-terraform-dry-run
          REGION: australia-southeast1
          REPO: das-docker-repo
          GIT_SHA: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -e

          for svc in ${{ steps.changes.outputs.services }}; do
            echo "Building and tagging $svc..."

            # Build image using Docker Compose
            docker compose -f cloud-dry-run/docker-compose.yml build "$svc"

            IMAGE_URI="$REGION-docker.pkg.dev/$PROJECT_ID/$REPO/$svc"

            # Tag image with commit SHA
            docker tag "$IMAGE_URI" "$IMAGE_URI:$GIT_SHA"

            # Tag as 'latest' if on main branch
            if [[ "$BRANCH_NAME" == "main" ]]; then
              docker tag "$IMAGE_URI" "$IMAGE_URI:latest"
            fi

            echo "Pushing $IMAGE_URI:$GIT_SHA"
            docker push "$IMAGE_URI:$GIT_SHA"

            if [[ "$BRANCH_NAME" == "main" ]]; then
              echo "Pushing $IMAGE_URI:latest"
              docker push "$IMAGE_URI:latest"
            fi
          done

      # Step 9: Show recent images for changed services
      - name: List Recent Images for Changed Services
        if: steps.changes.outputs.services != ''
        run: |
          for svc in ${{ steps.changes.outputs.services }}; do
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table(DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
          done

      # Step 10: Show images for all microservices
      - name: List Images for All Microservices
        run: |
          for svc in microservice-a microservice-b frontend; do
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table(DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
          done

      # Step 11: List all images in Artifact Registry (for visibility)
      - name: List All Images in Artifact Registry
        run: |
          PROJECT_ID="das-terraform-dry-run"
          LOCATION="australia-southeast1"
          REPO="das-docker-repo"
          SERVICES=("microservice-a" "microservice-b" "frontend")

          for svc in "${SERVICES[@]}"; do
            gcloud artifacts docker images list $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO/$svc \
              --limit=10 \
              --format="table(DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
          done
      # Step 12: Confirm success
      - name: Workflow Completed
        run: echo "CI/CD workflow completed successfully."
