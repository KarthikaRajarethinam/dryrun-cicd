name: Build & Deploy Microservices v2

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"
      - "cloud-dry-run/docker-compose.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/**"
      - "cloud-dry-run/docker-compose.yml"

jobs:
  build-and-deploy:
    name: Build & Deploy Affected Microservices
    runs-on: ubuntu-latest

    environment:
      name: production
      url: https://console.cloud.google.com/artifacts

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      - name: Authenticate to Google Cloud using Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/30467746746/locations/global/workloadIdentityPools/github-cicd/providers/github'
          service_account: 'github-wif@das-terraform-dry-run.iam.gserviceaccount.com'

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

      - name: Ensure Artifact Registry repo exists or create it
        run: |
          set -e
          REPO_NAME="das-docker-repo"
          LOCATION="australia-southeast1"
          PROJECT_ID="das-terraform-dry-run"

          echo "Checking if Artifact Registry repo '$REPO_NAME' exists in '$LOCATION'..."

          if gcloud artifacts repositories describe "$REPO_NAME" --location="$LOCATION" --project="$PROJECT_ID" >/dev/null 2>&1; then
            echo "Repository '$REPO_NAME' already exists."
          else
            echo "Repository '$REPO_NAME' not found. Creating it now..."
            gcloud artifacts repositories create "$REPO_NAME" \
              --repository-format=docker \
              --location="$LOCATION" \
              --description="Docker repo for microservices CI/CD" \
              --project="$PROJECT_ID"
            echo "Repository '$REPO_NAME' created successfully."
          fi

      - name: Detect changed microservices
        id: changes
        run: |
          echo "Detecting changed microservices..."
          changed_services=()

          base_ref=$(git merge-base origin/main HEAD)
          changed_files=$(git diff --name-only "$base_ref" HEAD)

          echo "$changed_files"

          if echo "$changed_files" | grep -q "^backend/microservice-a/"; then
            changed_services+=("microservice-a")
          fi
          if echo "$changed_files" | grep -q "^backend/microservice-b/"; then
            changed_services+=("microservice-b")
          fi
          if echo "$changed_files" | grep -q "^frontend/"; then
            changed_services+=("frontend")
          fi

          # Join array into a single space-separated string
          services=$(IFS=" "; echo "${changed_services[*]}")

          echo "Changed services: $services"
          echo "services=$services" >> "$GITHUB_OUTPUT"

      - name: Build and push changed services
        if: steps.changes.outputs.services != ''
        run: |
          for svc in ${{ steps.changes.outputs.services }}; do
            echo "::group::Building $svc"
            docker compose -f cloud-dry-run/docker-compose.yml build "$svc"
            echo "::endgroup::"

            echo "::group::Pushing $svc"
            docker compose -f cloud-dry-run/docker-compose.yml push "$svc"
            echo "::endgroup::"
          done

      - name: List recent images for changed services
        if: steps.changes.outputs.services != ''
        run: |
          for svc in ${{ steps.changes.outputs.services }}; do
            echo "::group::Recent images for $svc"
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table[box](DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
            echo "::endgroup::"
          done

      - name: List recent images for all microservices
        run: |
          echo "ðŸ“¦ Listing Docker images for all services:"
          for svc in microservice-a microservice-b frontend; do
            echo "::group::Images for $svc"
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table[box](DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
            echo "::endgroup::"
          done

      - name: Workflow completed
        run: echo "âœ… CI/CD workflow completed successfully."
