name: Build & Push Docker Images

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - "cloud-dry-run/docker-compose.yml"
      - ".github/workflows/**"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - "frontend/**"
      - "cloud-dry-run/docker-compose.yml"
      - ".github/workflows/**"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://console.cloud.google.com/artifacts

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Install Docker Compose v2
      - name: Install Docker Compose v2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      # Step 3: Authenticate to Google Cloud using WIF via GitHub Secrets
      - name: Authenticate with Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      # Step 4: Configure Docker to use Google Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

      # Step 5: Detect changed microservices
      - name: Detect changed services
        id: detect
        run: |
          changed_services=()
          base_ref=$(git merge-base origin/main HEAD)
          changed_files=$(git diff --name-only "$base_ref" HEAD)

          if echo "$changed_files" | grep -q "^backend/microservice-a/"; then
            changed_services+=("microservice-a")
          fi
          if echo "$changed_files" | grep -q "^backend/microservice-b/"; then
            changed_services+=("microservice-b")
          fi
          if echo "$changed_files" | grep -q "^frontend/"; then
            changed_services+=("frontend")
          fi

          echo "services=${changed_services[*]}" >> "$GITHUB_OUTPUT"

      # Step 6: Build, Tag, and Push Docker Images
      - name: Build, Tag, and Push Docker Images
        if: steps.detect.outputs.services != ''
        env:
          REGION: australia-southeast1
          PROJECT_ID: das-terraform-dry-run
          REPO: das-docker-repo
          GIT_SHA: ${{ github.sha }}
        run: |
          set -e
          for svc in ${{ steps.detect.outputs.services }}; do
            echo "Building and pushing $svc"

            IMAGE_URI="$REGION-docker.pkg.dev/$PROJECT_ID/$REPO/$svc"

            # Determine build path based on service
            if [ "$svc" == "frontend" ]; then
              svc_path="frontend"
            else
              svc_path="backend/$svc"
            fi

            echo "Using path: $svc_path"

            # Build and tag
            docker build -t "$IMAGE_URI:latest" -t "$IMAGE_URI:$GIT_SHA" "$svc_path"

            # Push to Artifact Registry
            docker push "$IMAGE_URI:$GIT_SHA"
            docker push "$IMAGE_URI:latest"
          done

      # Step 7: List images for changed services
      - name: List Pushed Images for Changed Services
        if: steps.detect.outputs.services != ''
        run: |
          for svc in ${{ steps.detect.outputs.services }}; do
            echo "Listing pushed images for $svc"
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table(DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
          done

      # Step 8: List all images in registry
      - name: List All Images in Registry
        run: |
          for svc in microservice-a microservice-b frontend; do
            echo "All images for $svc"
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table(DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
          done

      # Step 9: Show local Docker images (for debug)
      - name: Show Local Docker Images
        run: docker images

      # Step 10: Final success message
      - name: Workflow complete
        run: echo "CI/CD process completed successfully."
