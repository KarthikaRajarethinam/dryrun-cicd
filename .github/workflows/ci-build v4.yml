name: Build & Deploy Selective/incremental Microservices Manual

on:
  workflow_dispatch:
    inputs:
      microservices:
        description: 'Comma-separated list of microservices to build and deploy (e.g., microservice-a,microservice-b,frontend)'
        required: true
        default: 'microservice-a,microservice-b,frontend'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Debug â€” Current directory and top-level files
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing top-level files:"
          ls -la

      - name: Check docker-compose.yml exists
        run: |
          if [ -f docker-compose.yml ]; then
            echo "docker-compose.yml found"
          else
            echo "docker-compose.yml NOT found"
            exit 1
          fi

      - name: Install Docker Compose CLI plugin
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      - name: Authenticate with Google Cloud using Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/30467746746/locations/global/workloadIdentityPools/github-cicd/providers/github'
          service_account: 'cicd-gitops@das-terraform-dry-run.iam.gserviceaccount.com'
          
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

      - name: Ensure Artifact Registry repo exists or create it
        run: |
          set -e
          REPO_NAME="das-docker-repo"
          LOCATION="australia-southeast1"
          PROJECT_ID=$(gcloud config get-value project)
          echo "Checking if Artifact Registry repo '$REPO_NAME' exists in '$LOCATION'..."
          if gcloud artifacts repositories describe "$REPO_NAME" --location="$LOCATION" --project="$PROJECT_ID" >/dev/null 2>&1; then
            echo "Repository '$REPO_NAME' already exists."
          else
            echo "Repository '$REPO_NAME' not found. Creating it now..."
            gcloud artifacts repositories create "$REPO_NAME" \
              --repository-format=docker \
              --location="$LOCATION" \
              --description="Docker repo for dry run CI/CD" \
              --project="$PROJECT_ID"
            echo "Repository '$REPO_NAME' created successfully."
          fi

      - name: Parse microservices input
        id: parse
        run: |
          echo "Input microservices: ${{ github.event.inputs.microservices }}"
          # Convert input to array
          IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.microservices }}"
          # Print each service for debug
          for svc in "${SERVICES[@]}"; do
            echo "microservice=$svc" >> $GITHUB_OUTPUT
          done
          # Also export as a comma separated string for reuse
          echo "SERVICES=${{ github.event.inputs.microservices }}" >> $GITHUB_ENV

      - name: Detect changed microservices (optional incremental)
        id: detect_changes
        run: |
          echo "Detecting changed microservices since last commit on main"
          git fetch origin main
          # Get changed files compared to main
          CHANGED_FILES=$(git diff --name-only origin/main)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          CHANGED_SERVICES=""
          for svc in $(echo "${{ env.SERVICES }}" | tr ',' '\n'); do
            # Check if any changed file is inside microservice directory or matches service name in path
            if echo "$CHANGED_FILES" | grep -q "^$svc/" || echo "$CHANGED_FILES" | grep -q "^docker-compose.yml$"; then
              CHANGED_SERVICES="${CHANGED_SERVICES},${svc}"
            fi
          done
          # Trim leading comma
          CHANGED_SERVICES="${CHANGED_SERVICES#,}"
          echo "Changed or affected microservices: $CHANGED_SERVICES"
          echo "changed_services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT

      - name: Set microservices to build (intersection of input and changes)
        id: set_build_list
        run: |
          INPUT_SERVICES="${{ env.SERVICES }}"
          CHANGED_SERVICES="${{ steps.detect_changes.outputs.changed_services }}"
          
          # If no changes detected, build input services anyway
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "No changes detected, building all input microservices: $INPUT_SERVICES"
            echo "BUILD_SERVICES=$INPUT_SERVICES" >> $GITHUB_ENV
            exit 0
          fi
          
          # Find intersection between INPUT_SERVICES and CHANGED_SERVICES
          BUILD_LIST=""
          for svc in $(echo "$INPUT_SERVICES" | tr ',' '\n'); do
            if echo "$CHANGED_SERVICES" | grep -qw "$svc"; then
              BUILD_LIST="${BUILD_LIST},${svc}"
            fi
          done
          BUILD_LIST="${BUILD_LIST#,}"
          
          if [ -z "$BUILD_LIST" ]; then
            echo "No selected microservices have changes. Exiting."
            exit 0
          else
            echo "Microservices to build: $BUILD_LIST"
            echo "BUILD_SERVICES=$BUILD_LIST" >> $GITHUB_ENV
          fi

      - name: Build selected Docker images with Docker Compose
        run: |
          echo "Building selected services: $BUILD_SERVICES"
          # Compose syntax: docker compose build <service1> <service2> ...
          docker compose -f docker-compose.yml build $BUILD_SERVICES

      - name: Push selected Docker images with Docker Compose
        run: |
          echo "Pushing selected services: $BUILD_SERVICES"
          docker compose -f docker-compose.yml push $BUILD_SERVICES

      - name: List recent images in Artifact Registry for selected microservices
        run: |
          for svc in $(echo "$BUILD_SERVICES" | tr ',' '\n'); do
            echo "::group::${svc}"
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table[box](DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
            echo "::endgroup::"
          done

      - name: Workflow completed successfully
        run: echo "CI pipeline completed successfully. Selected images built and pushed."
