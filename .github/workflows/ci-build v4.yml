name: Build & Deploy Selective/Incremental Microservices

on:
  workflow_dispatch:
    inputs:
      microservices:
        description: 'Comma-separated list of microservices to build and deploy (e.g., microservice-a,microservice-b,frontend)'
        required: true
        default: 'microservice-a,microservice-b,frontend'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important for getting full git history

      - name: Debug â€” Current directory and top-level files
        run: |
          echo "Current directory: $(pwd)"
          ls -R

      - name: Check docker-compose.yml exists
        run: |
          if [ -f docker-compose.yml ]; then
            echo "docker-compose.yml found"
          else
            echo "docker-compose.yml NOT found"
            exit 1
          fi

      - name: Install Docker Compose CLI plugin
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker compose version

      - name: Authenticate with Google Cloud using Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/30467746746/locations/global/workloadIdentityPools/github-cicd/providers/github'
          service_account: 'cicd-gitops@das-terraform-dry-run.iam.gserviceaccount.com'

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

      - name: Ensure Artifact Registry repo exists or create it
        run: |
          set -e
          REPO_NAME="das-docker-repo"
          LOCATION="australia-southeast1"
          PROJECT_ID=$(gcloud config get-value project)
          echo "Checking if Artifact Registry repo '$REPO_NAME' exists in '$LOCATION'..."
          if gcloud artifacts repositories describe "$REPO_NAME" --location="$LOCATION" --project="$PROJECT_ID" >/dev/null 2>&1; then
            echo "Repository '$REPO_NAME' already exists."
          else
            echo "Repository '$REPO_NAME' not found. Creating it now..."
            gcloud artifacts repositories create "$REPO_NAME" \
              --repository-format=docker \
              --location="$LOCATION" \
              --description="Docker repo for dry run CI/CD" \
              --project="$PROJECT_ID"
            echo "Repository '$REPO_NAME' created successfully."
          fi

      - name: Detect changed microservices
        id: changes
        run: |
          echo "Detecting changed microservices..."
          changed=""

          # Handle first commit or shallow clone scenario
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            base_ref=HEAD^
          else
            echo "First commit or shallow clone, comparing against empty tree"
            base_ref=$(git hash-object -t tree /dev/null)
          fi

          changed_files=$(git diff --name-only -b "$base_ref" HEAD)
          echo "Changed files: $changed_files"

          selected_services="${{ github.event.inputs.microservices }}"

          for svc in $(echo "$selected_services" | tr "," "\n"); do
            if echo "$changed_files" | grep -q "^cloud-dry-run/backend/$svc/"; then
              changed="$changed $svc"
            fi
            if echo "$changed_files" | grep -q "^cloud-dry-run/frontend/"; then
              if [ "$svc" = "frontend" ]; then
                changed="$changed frontend"
              fi
            fi
          done

          echo "Changed services: $changed"
          echo "services=$changed" >> "$GITHUB_OUTPUT"

      - name: Build and push changed services
        if: steps.changes.outputs.services != ''
        run: |
          for svc in ${{ steps.changes.outputs.services }}; do
            echo "::group::Building $svc"
            docker compose -f docker-compose.yml build "$svc"
            echo "::endgroup::"

            echo "::group::Pushing $svc"
            docker compose -f docker-compose.yml push "$svc"
            echo "::endgroup::"
          done

      - name: List recent images in Artifact Registry
        if: steps.changes.outputs.services != ''
        run: |
          for svc in ${{ steps.changes.outputs.services }}; do
            echo "::group::Images for $svc"
            gcloud artifacts docker images list australia-southeast1-docker.pkg.dev/das-terraform-dry-run/das-docker-repo/$svc \
              --limit=5 \
              --format="table[box](DIGEST, TAGS, IMAGE_SIZE_BYTES, UPLOAD_TIME)"
            echo "::endgroup::"
          done

      - name: Workflow completed successfully
        run: echo "CI pipeline completed successfully. Selected & changed images built and pushed to Google Artifact Registry."
